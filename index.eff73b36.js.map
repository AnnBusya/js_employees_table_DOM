{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar table = document.querySelector(\"table\");\nvar thead = table.querySelector(\"thead\");\nvar tbody = table.querySelector(\"tbody\");\nvar sortDirection = true;\nvar currentColumn = null;\nvar rows = Array.from(tbody.querySelectorAll(\"tr\"));\nvar form = document.createElement(\"form\");\nvar dataAttributes = [\n    \"name\",\n    \"position\",\n    \"office\",\n    \"age\",\n    \"salary\"\n];\nvar button = document.createElement(\"button\");\nbutton.type = \"submit\";\nbutton.textContent = \"Save to table\";\nfunction capitalizeFirstLetter(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nform.classList.add(\"new-employee-form\");\nvar sortTableByColumn = function(index) {\n    var isNumberColumn = [\n        \"Age\",\n        \"Salary\"\n    ].includes(thead.rows[0].cells[index].textContent);\n    var sortedRows = rows.slice(0);\n    sortedRows.sort(function(rowA, rowB) {\n        var cellA = rowA.cells[index].textContent;\n        var cellB = rowB.cells[index].textContent;\n        if (isNumberColumn) {\n            cellA = parseFloat(cellA.replace(/[^0-9.-]+/g, \"\"));\n            cellB = parseFloat(cellB.replace(/[^0-9.-]+/g, \"\"));\n        }\n        return (sortDirection ? 1 : -1) * (cellA > cellB ? 1 : -1);\n    });\n    tbody.innerHTML = \"\";\n    sortedRows.forEach(function(row) {\n        return tbody.appendChild(row);\n    });\n    rows = sortedRows;\n};\nthead.addEventListener(\"click\", function(e) {\n    var target = e.target;\n    if (target.tagName !== \"TH\") return;\n    var columnIndex = Array.from(target.parentNode.children).indexOf(target);\n    if (currentColumn === columnIndex) sortDirection = !sortDirection;\n    else sortDirection = true;\n    currentColumn = columnIndex;\n    sortTableByColumn(columnIndex);\n});\ntbody.addEventListener(\"click\", function(e) {\n    var target = e.target;\n    if (target.tagName !== \"TD\") return;\n    var clickedRow = target.parentNode;\n    tbody.querySelectorAll(\"tr\").forEach(function(row) {\n        return row.classList.remove(\"active\");\n    });\n    clickedRow.classList.add(\"active\");\n});\nvar handleAddInputs = function() {\n    dataAttributes.forEach(function(attribute) {\n        var label = document.createElement(\"label\");\n        var input = document.createElement(\"input\");\n        switch(attribute){\n            case \"name\":\n            case \"position\":\n                input.type = \"text\";\n                input.name = attribute;\n                input.dataset.qa = attribute;\n                input.addEventListener(\"input\", function() {\n                    input.value = capitalizeFirstLetter(input.value);\n                });\n                label.textContent = capitalizeFirstLetter(attribute);\n                label.appendChild(input);\n                form.appendChild(label);\n                break;\n            case \"office\":\n                var select = document.createElement(\"select\");\n                var cities = [\n                    \"Tokyo\",\n                    \"Singapore\",\n                    \"London\",\n                    \"New York\",\n                    \"Edinburgh\",\n                    \"San Francisco\"\n                ];\n                select.name = attribute;\n                select.required = true;\n                select.dataset.qa = attribute;\n                cities.forEach(function(city) {\n                    var option = document.createElement(\"option\");\n                    option.value = city;\n                    option.textContent = city;\n                    select.appendChild(option);\n                });\n                label.textContent = capitalizeFirstLetter(attribute);\n                label.appendChild(select);\n                form.appendChild(label);\n                break;\n            case \"age\":\n            case \"salary\":\n                input.type = \"number\";\n                input.name = attribute;\n                input.dataset.qa = attribute;\n                label.textContent = capitalizeFirstLetter(attribute);\n                label.appendChild(input);\n                form.appendChild(label);\n                break;\n        }\n    });\n};\nvar showNotification = function(message, isSuccess) {\n    var notification = document.createElement(\"div\");\n    notification.className = \"notification \".concat(isSuccess ? \"success\" : \"error\");\n    notification.setAttribute(\"data-qa\", \"notification\");\n    notification.textContent = message;\n    document.body.appendChild(notification);\n    setTimeout(function() {\n        return notification.remove();\n    }, 3000);\n};\nvar handleAddEmployee = function(action) {\n    action.preventDefault();\n    var fullName = form.querySelector('input[name=\"name\"]');\n    var positionInput = form.querySelector('input[name=\"position\"]');\n    var officeSelect = form.querySelector('select[name=\"office\"]');\n    var ageInput = form.querySelector('input[name=\"age\"]');\n    var salaryInput = form.querySelector('input[name=\"salary\"]');\n    var employeeName = fullName.value.trim();\n    var position = positionInput.value.trim();\n    var office = officeSelect.value;\n    var age = parseInt(ageInput.value, 10);\n    var salary = parseFloat(salaryInput.value);\n    var warnings = [];\n    if (employeeName.length < 4) warnings.push(\"Name must be at least 4 characters long.\");\n    if (positionInput.value.trim() !== positionInput.value) warnings.push(\"Position field should not contain only spaces.\");\n    if (positionInput.value.trim() === \"\") warnings.push(\"Position field cannot be empty.\");\n    if (age < 18 || age > 90) warnings.push(\"Age must be between 18 and 90.\");\n    if (isNaN(salary) || salary <= 0) warnings.push(\"Salary must be a positive number.\");\n    if (warnings.length > 0) return showNotification(warnings.join(\"\\n\"), false);\n    var newRow = document.createElement(\"tr\");\n    var newName = document.createElement(\"td\");\n    var newPosition = document.createElement(\"td\");\n    var newOffice = document.createElement(\"td\");\n    var newAge = document.createElement(\"td\");\n    var newSalary = document.createElement(\"td\");\n    newName.textContent = employeeName;\n    newPosition.textContent = position;\n    newOffice.textContent = office;\n    newAge.textContent = age;\n    newSalary.textContent = \"$\".concat(salary.toLocaleString(\"en-US\"));\n    newRow.append(newName, newPosition, newOffice, newAge, newSalary);\n    tbody.appendChild(newRow);\n    rows.push(newRow);\n    form.reset();\n    showNotification(\"Employee added successfully!\", true);\n};\ntbody.addEventListener(\"dblclick\", function(dblClickEvent) {\n    var target = dblClickEvent.target;\n    if (target.tagName !== \"TD\") return;\n    var originalText = target.textContent;\n    var input = document.createElement(\"input\");\n    input.type = \"text\";\n    input.className = \"cell-input\";\n    input.value = originalText;\n    target.textContent = \"\";\n    target.appendChild(input);\n    input.focus();\n    input.addEventListener(\"blur\", function() {\n        target.textContent = input.value || originalText;\n        input.remove();\n    });\n    input.addEventListener(\"keydown\", function(keyEvent) {\n        if (keyEvent.key === \"Enter\") {\n            target.textContent = input.value || originalText;\n            input.remove();\n        }\n    });\n});\nhandleAddInputs();\nform.appendChild(button);\ndocument.body.appendChild(form);\nbutton.addEventListener(\"click\", handleAddEmployee);\n\n//# sourceMappingURL=index.eff73b36.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst thead = table.querySelector('thead');\nconst tbody = table.querySelector('tbody');\n\nlet sortDirection = true;\nlet currentColumn = null;\nlet rows = Array.from(tbody.querySelectorAll('tr'));\nconst form = document.createElement('form');\nconst dataAttributes = ['name', 'position', 'office', 'age', 'salary'];\nconst button = document.createElement('button');\n\nbutton.type = 'submit';\nbutton.textContent = 'Save to table';\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nform.classList.add('new-employee-form');\n\nconst sortTableByColumn = (index) => {\n  const isNumberColumn = ['Age', 'Salary'].includes(\n    thead.rows[0].cells[index].textContent,\n  );\n\n  const sortedRows = rows.slice(0);\n\n  sortedRows.sort((rowA, rowB) => {\n    let cellA = rowA.cells[index].textContent;\n    let cellB = rowB.cells[index].textContent;\n\n    if (isNumberColumn) {\n      cellA = parseFloat(cellA.replace(/[^0-9.-]+/g, ''));\n      cellB = parseFloat(cellB.replace(/[^0-9.-]+/g, ''));\n    }\n\n    return (sortDirection ? 1 : -1) * (cellA > cellB ? 1 : -1);\n  });\n\n  tbody.innerHTML = '';\n  sortedRows.forEach((row) => tbody.appendChild(row));\n  rows = sortedRows;\n};\n\nthead.addEventListener('click', (e) => {\n  const target = e.target;\n\n  if (target.tagName !== 'TH') {\n    return;\n  }\n\n  const columnIndex = Array.from(target.parentNode.children).indexOf(target);\n\n  if (currentColumn === columnIndex) {\n    sortDirection = !sortDirection;\n  } else {\n    sortDirection = true;\n  }\n\n  currentColumn = columnIndex;\n  sortTableByColumn(columnIndex);\n});\n\ntbody.addEventListener('click', (e) => {\n  const target = e.target;\n\n  if (target.tagName !== 'TD') {\n    return;\n  }\n\n  const clickedRow = target.parentNode;\n\n  tbody.querySelectorAll('tr').forEach((row) => row.classList.remove('active'));\n  clickedRow.classList.add('active');\n});\n\nconst handleAddInputs = () => {\n  dataAttributes.forEach((attribute) => {\n    const label = document.createElement('label');\n    const input = document.createElement('input');\n\n    switch (attribute) {\n      case 'name':\n      case 'position':\n        input.type = 'text';\n        input.name = attribute;\n        input.dataset.qa = attribute;\n\n        input.addEventListener('input', () => {\n          input.value = capitalizeFirstLetter(input.value);\n        });\n\n        label.textContent = capitalizeFirstLetter(attribute);\n        label.appendChild(input);\n        form.appendChild(label);\n        break;\n\n      case 'office':\n        const select = document.createElement('select');\n        const cities = [\n          'Tokyo',\n          'Singapore',\n          'London',\n          'New York',\n          'Edinburgh',\n          'San Francisco',\n        ];\n\n        select.name = attribute;\n        select.required = true;\n        select.dataset.qa = attribute;\n\n        cities.forEach((city) => {\n          const option = document.createElement('option');\n\n          option.value = city;\n          option.textContent = city;\n          select.appendChild(option);\n        });\n\n        label.textContent = capitalizeFirstLetter(attribute);\n        label.appendChild(select);\n        form.appendChild(label);\n        break;\n\n      case 'age':\n      case 'salary':\n        input.type = 'number';\n        input.name = attribute;\n        input.dataset.qa = attribute;\n\n        label.textContent = capitalizeFirstLetter(attribute);\n        label.appendChild(input);\n        form.appendChild(label);\n        break;\n    }\n  });\n};\n\nconst showNotification = (message, isSuccess) => {\n  const notification = document.createElement('div');\n\n  notification.className = `notification ${isSuccess ? 'success' : 'error'}`;\n  notification.setAttribute('data-qa', 'notification');\n  notification.textContent = message;\n  document.body.appendChild(notification);\n  setTimeout(() => notification.remove(), 3000);\n};\n\nconst handleAddEmployee = (action) => {\n  action.preventDefault();\n\n  const fullName = form.querySelector('input[name=\"name\"]');\n  const positionInput = form.querySelector('input[name=\"position\"]');\n  const officeSelect = form.querySelector('select[name=\"office\"]');\n  const ageInput = form.querySelector('input[name=\"age\"]');\n  const salaryInput = form.querySelector('input[name=\"salary\"]');\n\n  const employeeName = fullName.value.trim();\n  const position = positionInput.value.trim();\n  const office = officeSelect.value;\n  const age = parseInt(ageInput.value, 10);\n  const salary = parseFloat(salaryInput.value);\n\n  const warnings = [];\n\n  if (employeeName.length < 4) {\n    warnings.push('Name must be at least 4 characters long.');\n  }\n\n  if (positionInput.value.trim() !== positionInput.value) {\n    warnings.push('Position field should not contain only spaces.');\n  }\n\n  if (positionInput.value.trim() === '') {\n    warnings.push('Position field cannot be empty.');\n  }\n\n  if (age < 18 || age > 90) {\n    warnings.push('Age must be between 18 and 90.');\n  }\n\n  if (isNaN(salary) || salary <= 0) {\n    warnings.push('Salary must be a positive number.');\n  }\n\n  if (warnings.length > 0) {\n    return showNotification(warnings.join('\\n'), false);\n  }\n\n  const newRow = document.createElement('tr');\n  const newName = document.createElement('td');\n  const newPosition = document.createElement('td');\n  const newOffice = document.createElement('td');\n  const newAge = document.createElement('td');\n  const newSalary = document.createElement('td');\n\n  newName.textContent = employeeName;\n  newPosition.textContent = position;\n  newOffice.textContent = office;\n  newAge.textContent = age;\n  newSalary.textContent = `$${salary.toLocaleString('en-US')}`;\n\n  newRow.append(newName, newPosition, newOffice, newAge, newSalary);\n  tbody.appendChild(newRow);\n\n  rows.push(newRow);\n\n  form.reset();\n  showNotification('Employee added successfully!', true);\n};\n\ntbody.addEventListener('dblclick', (dblClickEvent) => {\n  const target = dblClickEvent.target;\n\n  if (target.tagName !== 'TD') {\n    return;\n  }\n\n  const originalText = target.textContent;\n  const input = document.createElement('input');\n\n  input.type = 'text';\n  input.className = 'cell-input';\n  input.value = originalText;\n  target.textContent = '';\n  target.appendChild(input);\n  input.focus();\n\n  input.addEventListener('blur', () => {\n    target.textContent = input.value || originalText;\n    input.remove();\n  });\n\n  input.addEventListener('keydown', (keyEvent) => {\n    if (keyEvent.key === 'Enter') {\n      target.textContent = input.value || originalText;\n      input.remove();\n    }\n  });\n});\n\nhandleAddInputs();\nform.appendChild(button);\ndocument.body.appendChild(form);\n\nbutton.addEventListener('click', handleAddEmployee);\n"],"names":["table","document","querySelector","thead","tbody","sortDirection","currentColumn","rows","Array","from","querySelectorAll","form","createElement","button","capitalizeFirstLetter","str","charAt","toUpperCase","slice","type","textContent","classList","add","sortTableByColumn","index","isNumberColumn","includes","cells","sortedRows","sort","rowA","rowB","cellA","cellB","parseFloat","replace","innerHTML","forEach","row","appendChild","addEventListener","e","target","tagName","columnIndex","parentNode","children","indexOf","clickedRow","remove","showNotification","message","isSuccess","notification","className","concat","setAttribute","body","setTimeout","dblClickEvent","originalText","input","value","focus","keyEvent","key","dataAttributes","attribute","label","name","dataset","qa","select","required","cities","city","option","action","preventDefault","fullName","positionInput","officeSelect","ageInput","salaryInput","employeeName","trim","position","office","age","parseInt","salary","warnings","length","push","isNaN","join","newRow","newName","newPosition","newOffice","newAge","newSalary","toLocaleString","append","reset"],"version":3,"file":"index.eff73b36.js.map"}